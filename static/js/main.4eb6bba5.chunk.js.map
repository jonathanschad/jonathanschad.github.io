{"version":3,"sources":["util/shuffleAnswers.ts","util/generateTest.ts","components/ParsedText.tsx","components/Question.tsx","components/Result.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["shuffleAnswers","answers","oldCorrect","temporaryValue","randomIndex","currentIndex","JSON","parse","stringify","length","Math","floor","random","correct","generateTest","questions","count","order","generatedQuestions","index","console","log","generatedIndex","includes","push","ParsedText","words","children","split","className","map","word","src","substring","Question","question","next","prev","useState","radioState","setRadioState","checked","setChecked","handleChange","event","target","value","Paper","elevation","answer","String","Radio","onChange","Button","variant","onClick","color","toast","warning","disabled","Result","props","correctAnswers","wrongAnswers","givenAnswers","forEach","item","given","correctPercent","round","questionIndex","parseInt","Accordion","AccordionSummary","expandIcon","aria-controls","id","Typography","AccordionDetails","isNaN","resetTest","Test","active","setActive","setGivenAnswers","test","setTest","useEffect","App","setCount","fileName","setFileName","setQuestions","hasTestStarted","setTestStarted","AppBar","position","style","cursor","Toolbar","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","marginBottom","TextField","label","type","InputLabelProps","shrink","component","inputField","document","getElementById","files","name","fr","FileReader","onload","e","result","success","error","readAsText","hidden","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4eb6bba5.chunk.js","sourcesContent":["export const shuffleAnswers = (answers: string[], oldCorrect: number) => {\n    answers = JSON.parse(JSON.stringify(answers));\n    var currentIndex = answers.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        if (currentIndex == oldCorrect) oldCorrect = randomIndex;\n        else if (randomIndex == oldCorrect) oldCorrect = currentIndex;\n\n        // And swap it with the current element.\n        temporaryValue = answers[currentIndex];\n        answers[currentIndex] = answers[randomIndex];\n        answers[randomIndex] = temporaryValue;\n    }\n\n    return { answers, correct: oldCorrect };\n};\n","import { IQuestion } from \"../interfaces/IQuestion\";\nimport { shuffleAnswers } from \"./shuffleAnswers\";\n\nexport const generateTest = (questions: IQuestion[], count: number) => {\n    const order: number[] = [];\n    const generatedQuestions: IQuestion[] = [];\n\n    if (count > questions.length) count = questions.length;\n\n    for (let index = 0; index < count; index++) {\n        console.log(index);\n\n        let generatedIndex = Math.floor(Math.random() * count);\n        console.log(generatedIndex);\n        while (order.includes(generatedIndex)) {\n            console.log(order, generatedIndex);\n\n            generatedIndex = Math.floor(Math.random() * count);\n        }\n\n        order.push(generatedIndex);\n        console.log(questions[generatedIndex]);\n\n        const { answers, correct } = shuffleAnswers(\n            questions[generatedIndex].answers,\n            questions[generatedIndex].correct\n        );\n\n        generatedQuestions.push({ ...questions[generatedIndex], answers, correct });\n    }\n\n    return generatedQuestions;\n};\n","import React from \"react\";\n\ninterface ParsedTextProps {\n    children: string;\n}\nconst ParsedText = ({ children }: ParsedTextProps) => {\n    const re = /img([^)]*)\\)/;\n    const words = children.split(re);\n\n    return (\n        <div className=\"parsedText\">\n            {words.map((word, index) => {\n                if (index % 2 === 0) {\n                    return <div key={index}>{word}</div>;\n                } else if (index % 2 === 1) {\n                    return <img key={index} src={word.substring(1, word.length)} />;\n                }\n            })}\n        </div>\n    );\n};\n\nexport default ParsedText;\n","import { Button, FormControl, FormControlLabel, Paper, Radio, RadioGroup } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport ParsedText from \"./ParsedText\";\n\ninterface QuestionProps extends IQuestion {\n    next: (answer: string) => void;\n    prev: () => void;\n}\nconst Question = ({ question, answers, correct, next, prev }: QuestionProps) => {\n    const [radioState, setRadioState] = useState<string>(\"\");\n    const [checked, setChecked] = useState<boolean>(false);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(event.target.value);\n\n        if (!checked) setRadioState(event.target.value);\n    };\n\n    return (\n        <div className=\"question\">\n            <Paper elevation={3}>\n                <h2>Frage</h2>\n                <ParsedText>{question}</ParsedText>\n            </Paper>\n            <Paper elevation={3}>\n                <h2>Antworten</h2>\n                {answers.map((answer, index) => (\n                    <div\n                        className={\n                            \"answers \" +\n                            (checked\n                                ? correct === index\n                                    ? \"correct\"\n                                    : radioState === String(index)\n                                    ? \"false\"\n                                    : \"\"\n                                : \"\")\n                        }\n                        key={index}\n                    >\n                        <Radio checked={radioState === String(index)} value={index} onChange={handleChange} />\n\n                        <ParsedText>{answer}</ParsedText>\n                    </div>\n                ))}\n            </Paper>\n            <Paper elevation={3}>\n                <div className=\"questionNavi\">\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => {\n                            prev();\n                        }}\n                    >\n                        Zurück\n                    </Button>\n                    {checked ? (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                next(radioState);\n                            }}\n                        >\n                            Weiter\n                        </Button>\n                    ) : (\n                        <div\n                            onClick={() => {\n                                if (radioState === \"\") toast.warning(\"Du hast keine Antwort ausgewählt!\");\n                            }}\n                        >\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    setChecked(true);\n                                }}\n                                disabled={radioState === \"\"}\n                            >\n                                Überprüfen\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Paper>\n        </div>\n    );\n};\nexport default Question;\n","import { Accordion, AccordionDetails, AccordionSummary, Button, Paper, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { GivenAnswers } from \"../interfaces/IGivenAnswer\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ParsedText from \"./ParsedText\";\n\ninterface ResultProps {\n    questions: IQuestion[];\n    givenAnswers: GivenAnswers[];\n    resetTest: () => void;\n}\nconst Result = (props: ResultProps) => {\n    let correctAnswers = 0;\n    let wrongAnswers = 0;\n\n    props.givenAnswers.forEach((item) => {\n        if (String(item.correct) == item.given) correctAnswers++;\n        else wrongAnswers++;\n    });\n\n    const correctPercent = Math.round((correctAnswers / (correctAnswers + wrongAnswers)) * 100);\n    return (\n        <div className=\"result\">\n            <Paper elevation={3}>\n                <h1>Ergebnis</h1>\n                <div className=\"percentage\">\n                    <span className={\"percentageNumber\" + (correctPercent >= 50 ? \" good\" : \" bad\")}>\n                        {correctPercent}%\n                    </span>\n                    <span> der Fragen wurden richtig beantwortet</span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"correctCount\">{correctAnswers}</span>\n                    <span>Frage korrekt beantwortet</span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"falseCount\">{wrongAnswers}</span>\n                    <span>Frage falsch beantwortet</span>\n                </div>\n            </Paper>\n\n            <div className=\"repeat\">\n                {props.givenAnswers.map((answer) => {\n                    console.log(props.questions[answer.questionIndex].answers, parseInt(answer.given));\n\n                    return (\n                        <div key={answer.questionIndex}>\n                            <Accordion\n                                className={\n                                    \"restultQuestion \" + (String(answer.correct) === answer.given ? \"correct\" : \"false\")\n                                }\n                            >\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography>\n                                        {props.questions[answer.questionIndex].question.substring(0, 37)}\n                                        {props.questions[answer.questionIndex].question.length > 37 ? \"...\" : \"\"}\n                                    </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <div className=\"details\">\n                                        <h2>Frage</h2>\n                                        <ParsedText>{props.questions[answer.questionIndex].question}</ParsedText>\n\n                                        {!isNaN(parseInt(answer.given)) && (\n                                            <>\n                                                <h2>Deine Antwort</h2>\n                                                <ParsedText>\n                                                    {\n                                                        props.questions[answer.questionIndex].answers[\n                                                            parseInt(answer.given)\n                                                        ]\n                                                    }\n                                                </ParsedText>\n                                            </>\n                                        )}\n                                        <h2>Korrekte Antwort</h2>\n                                        <ParsedText>\n                                            {props.questions[answer.questionIndex].answers[answer.correct]}\n                                        </ParsedText>\n                                    </div>\n                                </AccordionDetails>\n                            </Accordion>\n                        </div>\n                    );\n                })}\n            </div>\n            <Paper elevation={3}>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => props.resetTest()}>\n                    Nochmal\n                </Button>\n            </Paper>\n        </div>\n    );\n};\n\nexport default Result;\n","import { Paper } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { GivenAnswers } from \"../interfaces/IGivenAnswer\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { generateTest } from \"../util/generateTest\";\nimport { shuffleAnswers } from \"../util/shuffleAnswers\";\nimport Question from \"./Question\";\nimport Result from \"./Result\";\n\ninterface TestProps {\n    count: number;\n    questions: IQuestion[];\n    resetTest: () => void;\n}\n\nconst Test = (props: TestProps) => {\n    const [active, setActive] = useState<number>(0);\n    const [givenAnswers, setGivenAnswers] = useState<GivenAnswers[]>([]);\n\n    const [test, setTest] = useState<IQuestion[]>([]);\n\n    useEffect(() => {\n        console.log(generateTest(props.questions, props.count));\n        setTest(generateTest(props.questions, props.count));\n    }, [props.questions, props.count]);\n\n    console.log(test);\n\n    return (\n        <div>\n            {active < props.count ? (\n                <>\n                    <Paper elevation={3}>\n                        <div>\n                            {active + 1} von {props.count}\n                        </div>\n                    </Paper>\n                    {test[active] && (\n                        <Question\n                            key={active}\n                            question={test[active]?.question}\n                            answers={test[active]?.answers}\n                            correct={test[active]?.correct}\n                            next={(answer: string) => {\n                                setGivenAnswers([\n                                    ...givenAnswers,\n                                    { given: answer, questionIndex: active, correct: test[active]?.correct },\n                                ]);\n                                setActive(active + 1);\n                            }}\n                            prev={() => setActive(active - 1 >= 0 ? active - 1 : 0)}\n                        ></Question>\n                    )}\n                </>\n            ) : (\n                <Result givenAnswers={givenAnswers} questions={test} resetTest={props.resetTest} />\n            )}\n        </div>\n    );\n};\n\nexport default Test;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport chemie from \"./questions/chemie.json\";\nimport Test from \"./components/Test\";\nimport { AppBar, Button, IconButton, Paper, TextField, Toolbar, Typography } from \"@material-ui/core\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { IQuestion } from \"./interfaces/IQuestion\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n    const [count, setCount] = useState<number>(10);\n    const [fileName, setFileName] = useState<string>(\"Datei auswählen\");\n    const [questions, setQuestions] = useState<IQuestion[]>([]);\n    const [hasTestStarted, setTestStarted] = useState<boolean>();\n\n    const importJSON = () => {\n        const inputField: any = document.getElementById(\"file-upload\");\n        var files = inputField?.files;\n        console.log(files);\n\n        if (files.length <= 0) {\n            return false;\n        }\n        if (files && files[0]) setFileName(files[0].name);\n\n        var fr = new FileReader();\n\n        fr.onload = function (e: any) {\n            try {\n                var result = JSON.parse(e.target.result);\n                console.log(result);\n                setQuestions(result);\n                toast.success(\"Es wurden \" + result.length + \" Fragen erfolgreich importiert!\");\n            } catch (error) {\n                toast.error(\n                    \"Beim importieren der Fragen ist ein Fehler aufgetreten. Bitte überprüfe deine .json Datei\"\n                );\n            }\n        };\n\n        fr.readAsText(files.item(0));\n    };\n\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <div onClick={() => setTestStarted(false)} style={{ cursor: \"pointer\" }}>\n                    <Toolbar>\n                        <Typography variant=\"h6\">JsonLearn</Typography>\n                    </Toolbar>\n                </div>\n            </AppBar>\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={6000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n            <div className=\"App\">\n                {hasTestStarted ? (\n                    <Test\n                        key={fileName + count}\n                        questions={questions}\n                        count={count}\n                        resetTest={() => setTestStarted(false)}\n                    ></Test>\n                ) : (\n                    <>\n                        <Paper elevation={3}>\n                            <h2 style={{ marginBottom: \"1rem\" }}>Lern Modus auswählen</h2>\n                            <div>\n                                <TextField\n                                    id=\"outlined-number\"\n                                    label=\"Anzahl Fragen\"\n                                    type=\"number\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    value={count}\n                                    variant=\"outlined\"\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                        setCount(parseInt(event.target.value));\n                                    }}\n                                />\n                                <div className=\"fileUpload\">\n                                    <div className=\"name\">Dateiname: {fileName}</div>\n                                    <Button variant=\"contained\" component=\"label\" onChange={importJSON}>\n                                        Datei auswählen\n                                        <input type=\"file\" hidden id=\"file-upload\" />\n                                    </Button>\n                                </div>\n                            </div>\n                        </Paper>\n                        <Paper elevation={3}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    if (questions.length > 0) setTestStarted(true);\n                                    else {\n                                        toast.warning(\"Du muss noch eine Datei mit Fragen importieren!\");\n                                    }\n                                }}\n                            >\n                                Test starten\n                            </Button>\n                        </Paper>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}