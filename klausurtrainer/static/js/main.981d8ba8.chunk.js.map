{"version":3,"sources":["reportWebVitals.ts","util/shuffleAnswers.ts","components/ParsedText.tsx","components/Question.tsx","components/Result.tsx","components/Test.tsx","util/generateTest.ts","components/Settings.tsx","components/Header.tsx","App.tsx","util/importJson.ts","Root.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","shuffleAnswers","answers","oldCorrect","temporaryValue","randomIndex","currentIndex","JSON","parse","stringify","length","Math","floor","random","correct","ParsedText","words","children","split","useCookies","cookies","className","map","word","index","settings","useDangerouslySetInnerHTML","dangerouslySetInnerHTML","__html","src","substring","Question","question","next","useState","radioState","setRadioState","checked","setChecked","handleChange","event","target","value","Paper","elevation","answer","String","Radio","onChange","Button","variant","color","onClick","toast","warning","disabled","Result","props","correctAnswers","wrongAnswers","givenAnswers","forEach","item","given","correctPercent","round","Accordion","AccordionSummary","expandIcon","aria-controls","id","Typography","questions","questionIndex","AccordionDetails","isNaN","parseInt","resetTest","Test","active","setActive","setGivenAnswers","test","setTest","useEffect","count","order","generatedQuestions","generatedIndex","includes","push","generateTest","Settings","areSettingsOpen","setAreSettingsOpen","setCookie","settingsButton","useRef","setUseDangerouslySetInnerHTML","ref","IconButton","aria-label","aria-haspopup","Popover","anchorOrigin","vertical","horizontal","transformOrigin","open","onClose","anchorEl","current","FormControlLabel","control","Checkbox","e","name","label","Header","AppBar","position","Toolbar","setTestStarted","style","cursor","flexGrow","App","setCount","fileName","setFileName","setQuestions","hasTestStarted","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","marginBottom","TextField","type","InputLabelProps","shrink","component","inputField","document","getElementById","files","fr","FileReader","onload","result","success","error","readAsText","importJSON","hidden","Root","CookiesProvider","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.981d8ba8.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export const shuffleAnswers = (answers: string[], oldCorrect: number) => {\n    answers = JSON.parse(JSON.stringify(answers));\n    let currentIndex = answers.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        if (currentIndex == oldCorrect) oldCorrect = randomIndex;\n        else if (randomIndex == oldCorrect) oldCorrect = currentIndex;\n\n        // And swap it with the current element.\n        temporaryValue = answers[currentIndex];\n        answers[currentIndex] = answers[randomIndex];\n        answers[randomIndex] = temporaryValue;\n    }\n\n    return { answers, correct: oldCorrect };\n};\n","import React from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { IUseCookies } from \"../interfaces/ICookies\";\n\ninterface ParsedTextProps {\n    children: string;\n}\nconst ParsedText = ({ children }: ParsedTextProps) => {\n    const re = /img([^)]*)\\)/;\n    const words = children.split(re);\n    const [cookies] = useCookies([\"settings\"]) as IUseCookies;\n\n    return (\n        <div className=\"parsedText\">\n            {words.map((word, index) => {\n                if (index % 2 === 0) {\n                    if (cookies.settings?.useDangerouslySetInnerHTML)\n                        return <div key={index} dangerouslySetInnerHTML={{ __html: word }}></div>;\n                    else return <div key={index}>{word}</div>;\n                } else if (index % 2 === 1) {\n                    return <img key={index} src={word.substring(1, word.length)} />;\n                }\n            })}\n        </div>\n    );\n};\n\nexport default ParsedText;\n","import { Button, Paper, Radio } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport ParsedText from \"./ParsedText\";\n\ninterface QuestionProps extends IQuestion {\n    next: (answer: string) => void;\n}\nconst Question = ({ question, answers, correct, next }: QuestionProps) => {\n    const [radioState, setRadioState] = useState<string>(\"\");\n    const [checked, setChecked] = useState<boolean>(false);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!checked) setRadioState(event.target.value);\n    };\n\n    return (\n        <div className=\"question\">\n            <Paper elevation={3}>\n                <h2>Frage</h2>\n                <ParsedText>{question}</ParsedText>\n            </Paper>\n            <Paper elevation={3}>\n                <h2>Antworten</h2>\n                {answers.map((answer, index) => (\n                    <div\n                        className={\n                            \"answers \" +\n                            (checked\n                                ? correct === index\n                                    ? \"correct\"\n                                    : radioState === String(index)\n                                    ? \"false\"\n                                    : \"\"\n                                : \"\")\n                        }\n                        key={index}\n                    >\n                        <Radio checked={radioState === String(index)} value={index} onChange={handleChange} />\n\n                        <ParsedText>{answer}</ParsedText>\n                    </div>\n                ))}\n            </Paper>\n            <Paper elevation={3}>\n                <div className=\"questionNavi\">\n                    {checked ? (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                next(radioState);\n                            }}\n                        >\n                            Weiter\n                        </Button>\n                    ) : (\n                        <div\n                            onClick={() => {\n                                if (radioState === \"\") toast.warning(\"Du hast keine Antwort ausgewählt!\");\n                            }}\n                        >\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    setChecked(true);\n                                }}\n                                disabled={radioState === \"\"}\n                            >\n                                Überprüfen\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Paper>\n        </div>\n    );\n};\nexport default Question;\n","import { Accordion, AccordionDetails, AccordionSummary, Button, Paper, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { GivenAnswers } from \"../interfaces/IGivenAnswer\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ParsedText from \"./ParsedText\";\n\ninterface ResultProps {\n    questions: IQuestion[];\n    givenAnswers: GivenAnswers[];\n    resetTest: () => void;\n}\nconst Result = (props: ResultProps) => {\n    let correctAnswers = 0;\n    let wrongAnswers = 0;\n\n    props.givenAnswers.forEach((item) => {\n        if (String(item.correct) == item.given) correctAnswers++;\n        else wrongAnswers++;\n    });\n\n    const correctPercent = Math.round((correctAnswers / (correctAnswers + wrongAnswers)) * 100);\n    return (\n        <div className=\"result\">\n            <Paper elevation={3}>\n                <h1>Ergebnis</h1>\n                <div className=\"percentage\">\n                    <span className={\"percentageNumber\" + (correctPercent >= 50 ? \" good\" : \" bad\")}>\n                        {correctPercent}%\n                    </span>\n                    <span> der Fragen wurden richtig beantwortet</span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"correctCount\">{correctAnswers}</span>\n                    <span>Frage korrekt beantwortet</span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"falseCount\">{wrongAnswers}</span>\n                    <span>Frage falsch beantwortet</span>\n                </div>\n            </Paper>\n\n            <div className=\"repeat\">\n                {props.givenAnswers.map((answer) => {\n                    return (\n                        <div key={answer.questionIndex}>\n                            <Accordion\n                                className={\n                                    \"restultQuestion \" + (String(answer.correct) === answer.given ? \"correct\" : \"false\")\n                                }\n                            >\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography>\n                                        {props.questions[answer.questionIndex].question.substring(0, 37)}\n                                        {props.questions[answer.questionIndex].question.length > 37 ? \"...\" : \"\"}\n                                    </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <div className=\"details\">\n                                        <h2>Frage</h2>\n                                        <ParsedText>{props.questions[answer.questionIndex].question}</ParsedText>\n\n                                        {!isNaN(parseInt(answer.given)) && (\n                                            <>\n                                                <h2>Deine Antwort</h2>\n                                                <ParsedText>\n                                                    {\n                                                        props.questions[answer.questionIndex].answers[\n                                                            parseInt(answer.given)\n                                                        ]\n                                                    }\n                                                </ParsedText>\n                                            </>\n                                        )}\n                                        <h2>Korrekte Antwort</h2>\n                                        <ParsedText>\n                                            {props.questions[answer.questionIndex].answers[answer.correct]}\n                                        </ParsedText>\n                                    </div>\n                                </AccordionDetails>\n                            </Accordion>\n                        </div>\n                    );\n                })}\n            </div>\n            <Paper elevation={3}>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => props.resetTest()}>\n                    Nochmal\n                </Button>\n            </Paper>\n        </div>\n    );\n};\n\nexport default Result;\n","import { Paper } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { GivenAnswers } from \"../interfaces/IGivenAnswer\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { generateTest } from \"../util/generateTest\";\nimport Question from \"./Question\";\nimport Result from \"./Result\";\n\ninterface TestProps {\n    count: number;\n    questions: IQuestion[];\n    resetTest: () => void;\n}\n\nconst Test = (props: TestProps) => {\n    const [active, setActive] = useState<number>(0);\n    const [givenAnswers, setGivenAnswers] = useState<GivenAnswers[]>([]);\n\n    const [test, setTest] = useState<IQuestion[]>([]);\n\n    useEffect(() => {\n        setTest(generateTest(props.questions, props.count));\n    }, [props.questions, props.count]);\n\n    return (\n        <div>\n            {active < props.count ? (\n                <>\n                    <Paper elevation={3}>\n                        <div>\n                            {active + 1} von {props.count}\n                        </div>\n                    </Paper>\n                    {test[active] && (\n                        <Question\n                            key={active}\n                            question={test[active]?.question}\n                            answers={test[active]?.answers}\n                            correct={test[active]?.correct}\n                            next={(answer: string) => {\n                                setGivenAnswers([\n                                    ...givenAnswers,\n                                    { given: answer, questionIndex: active, correct: test[active]?.correct },\n                                ]);\n                                setActive(active + 1);\n                            }}\n                        ></Question>\n                    )}\n                </>\n            ) : (\n                <Result givenAnswers={givenAnswers} questions={test} resetTest={props.resetTest} />\n            )}\n        </div>\n    );\n};\n\nexport default Test;\n","import { IQuestion } from \"../interfaces/IQuestion\";\nimport { shuffleAnswers } from \"./shuffleAnswers\";\n\nexport const generateTest = (questions: IQuestion[], count: number) => {\n    const order: number[] = [];\n    const generatedQuestions: IQuestion[] = [];\n\n    if (count > questions.length) count = questions.length;\n\n    for (let index = 0; index < count; index++) {\n        let generatedIndex = Math.floor(Math.random() * count);\n        while (order.includes(generatedIndex)) {\n            generatedIndex = Math.floor(Math.random() * count);\n        }\n\n        order.push(generatedIndex);\n\n        const { answers, correct } = shuffleAnswers(\n            questions[generatedIndex].answers,\n            questions[generatedIndex].correct\n        );\n\n        generatedQuestions.push({ ...questions[generatedIndex], answers, correct });\n    }\n\n    return generatedQuestions;\n};\n","import React from \"react\";\nimport { Checkbox, FormControlLabel, IconButton, Popover } from \"@material-ui/core\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { IUseCookies } from \"../interfaces/ICookies\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\nconst Settings = () => {\n    const [areSettingsOpen, setAreSettingsOpen] = useState<boolean>(false);\n    const [cookies, setCookie] = useCookies() as IUseCookies;\n\n    const settingsButton = useRef<HTMLDivElement>(null);\n\n    const [useDangerouslySetInnerHTML, setUseDangerouslySetInnerHTML] = useState<boolean>(\n        cookies?.settings?.useDangerouslySetInnerHTML ?? true\n    );\n\n    useEffect(() => {\n        setCookie(\"settings\", { ...cookies?.settings, useDangerouslySetInnerHTML });\n    }, [useDangerouslySetInnerHTML]);\n    return (\n        <>\n            <div ref={settingsButton}>\n                <IconButton\n                    aria-label=\"Einstellungen\"\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    onClick={() => setAreSettingsOpen(!areSettingsOpen)}\n                    color=\"inherit\"\n                >\n                    <SettingsIcon />\n                </IconButton>\n            </div>\n            <Popover\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"right\",\n                }}\n                transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"right\",\n                }}\n                open={areSettingsOpen}\n                onClose={() => setAreSettingsOpen(!areSettingsOpen)}\n                anchorEl={settingsButton.current}\n            >\n                <div className=\"settings\">\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={useDangerouslySetInnerHTML}\n                                onChange={(e) => setUseDangerouslySetInnerHTML(e.target.checked)}\n                                name=\"checkedB\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Ausführung von HTML erlauben\"\n                    />\n                </div>\n            </Popover>\n        </>\n    );\n};\nexport default Settings;\n","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport Settings from \"./Settings\";\ninterface HeaderProps {\n    setTestStarted: (state: boolean) => void;\n}\nconst Header = (props: HeaderProps) => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <div onClick={() => props.setTestStarted(false)} style={{ cursor: \"pointer\", flexGrow: 1 }}>\n                    <Typography variant=\"h6\">Klausurtrainer</Typography>\n                </div>\n                <Settings></Settings>\n            </Toolbar>\n        </AppBar>\n    );\n};\nexport default Header;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Test from \"./components/Test\";\nimport { Button, Paper, TextField } from \"@material-ui/core\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { IQuestion } from \"./interfaces/IQuestion\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { importJSON } from \"./util/importJson\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n    const [count, setCount] = useState<number>(10);\n    const [fileName, setFileName] = useState<string>(\"Datei auswählen\");\n    const [questions, setQuestions] = useState<IQuestion[]>([]);\n    const [hasTestStarted, setTestStarted] = useState<boolean>();\n\n    return (\n        <div>\n            <Header setTestStarted={setTestStarted} />\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={6000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n            <div className=\"App\">\n                {hasTestStarted ? (\n                    <Test\n                        key={fileName + count}\n                        questions={questions}\n                        count={count >= questions.length ? questions.length : count}\n                        resetTest={() => setTestStarted(false)}\n                    ></Test>\n                ) : (\n                    <>\n                        <Paper elevation={3}>\n                            <h2 style={{ marginBottom: \"1rem\" }}>Lern Modus auswählen</h2>\n                            <div>\n                                <TextField\n                                    id=\"outlined-number\"\n                                    label=\"Anzahl Fragen\"\n                                    type=\"number\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    value={count}\n                                    variant=\"outlined\"\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                        setCount(parseInt(event.target.value));\n                                    }}\n                                />\n                                <div className=\"fileUpload\">\n                                    <div className=\"name\">Dateiname: {fileName}</div>\n                                    <Button\n                                        variant=\"contained\"\n                                        component=\"label\"\n                                        onChange={() => importJSON(setFileName, setQuestions)}\n                                    >\n                                        Datei auswählen\n                                        <input type=\"file\" hidden id=\"file-upload\" />\n                                    </Button>\n                                </div>\n                            </div>\n                        </Paper>\n                        <Paper elevation={3}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    if (questions.length > 0) setTestStarted(true);\n                                    else {\n                                        toast.warning(\"Du muss noch eine Datei mit Fragen importieren!\");\n                                    }\n                                }}\n                            >\n                                Test starten\n                            </Button>\n                        </Paper>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { toast } from \"react-toastify\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\n\nexport const importJSON = (setFileName: (param: string) => void, setQuestions: (param: IQuestion[]) => void) => {\n    const inputField: any = document.getElementById(\"file-upload\");\n    const files = inputField?.files;\n\n    if (files.length <= 0) {\n        return false;\n    }\n    if (files && files[0]) setFileName(files[0].name);\n\n    const fr = new FileReader();\n\n    fr.onload = function (e: any) {\n        try {\n            let result: IQuestion[] = JSON.parse(e.target.result);\n            result = result.map((item: IQuestion) => {\n                item.correct = item.correct - 1;\n                return item;\n            });\n            setQuestions(result);\n            toast.success(\"Es wurden \" + result.length + \" Fragen erfolgreich importiert!\");\n        } catch (error) {\n            toast.error(\"Beim importieren der Fragen ist ein Fehler aufgetreten. Bitte überprüfe deine .json Datei\");\n        }\n    };\n\n    fr.readAsText(files.item(0));\n};\n","import React from \"react\";\nimport { CookiesProvider } from \"react-cookie\";\nimport App from \"./App\";\n\nconst Root = () => {\n    return (\n        <CookiesProvider>\n            <App />\n        </CookiesProvider>\n    );\n};\nexport default Root;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Root from \"./Root\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Root />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}