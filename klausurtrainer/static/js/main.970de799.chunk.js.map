{"version":3,"sources":["reportWebVitals.ts","util/shuffleAnswers.ts","util/localStorage.ts","components/ParsedText.tsx","components/Question.tsx","components/Result.tsx","components/Test.tsx","util/generateTest.ts","util/importJson.ts","components/Settings.tsx","components/Header.tsx","App.tsx","Root.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","shuffleAnswers","answers","oldCorrect","temporaryValue","randomIndex","currentIndex","JSON","parse","stringify","length","Math","floor","random","correct","useLocalStorage","key","initialValue","useState","localStorage","getItem","error","storedValue","setStoredValue","useEffect","onStorageUpdate","e","detail","window","addEventListener","removeEventListener","value","setItem","event","CustomEvent","dispatchEvent","ParsedText","words","children","split","settings","className","map","word","index","useDangerouslySetInnerHTML","dangerouslySetInnerHTML","__html","src","substring","Question","question","next","radioState","setRadioState","checked","setChecked","handleChange","target","Paper","elevation","answer","String","Radio","onChange","Button","variant","color","onClick","toast","warning","disabled","Result","props","correctAnswers","wrongAnswers","givenAnswers","forEach","item","given","correctPercent","round","Accordion","AccordionSummary","expandIcon","aria-controls","id","Typography","AccordionDetails","questions","questionIndex","isNaN","parseInt","resetTest","Test","active","setActive","setGivenAnswers","test","setTest","count","shouldAnswersBeShuffled","order","generatedQuestions","generatedIndex","includes","push","generateTest","importJSON","setFileName","setQuestionSelectValue","inputField","document","getElementById","files","name","fr","FileReader","onload","fileNameShort","replace","result","setLocalStorage","getLocalStorage","success","readAsText","Settings","areSettingsOpen","setAreSettingsOpen","setSettings","settingsButton","useRef","setUseDangerouslySetInnerHTML","newSettings","ref","IconButton","aria-label","aria-haspopup","Popover","anchorOrigin","vertical","horizontal","transformOrigin","open","onClose","anchorEl","current","FormControlLabel","control","Checkbox","label","Header","AppBar","position","Toolbar","setTestStarted","style","cursor","flexGrow","App","setCount","fileName","hasTestStarted","randomOrder","setRandomOrder","questionSelectValue","availableQuestions","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","marginBottom","TextField","type","InputLabelProps","shrink","FormControl","InputLabel","Select","labelId","displayEmpty","undefined","Object","keys","MenuItem","component","hidden","Root","CookiesProvider","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.970de799.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export const shuffleAnswers = (answers: string[], oldCorrect: number) => {\n    answers = JSON.parse(JSON.stringify(answers));\n    let currentIndex = answers.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        if (currentIndex == oldCorrect) oldCorrect = randomIndex;\n        else if (randomIndex == oldCorrect) oldCorrect = currentIndex;\n\n        // And swap it with the current element.\n        temporaryValue = answers[currentIndex];\n        answers[currentIndex] = answers[randomIndex];\n        answers[randomIndex] = temporaryValue;\n    }\n\n    return { answers, correct: oldCorrect };\n};\n","import { useEffect, useState } from \"react\";\n\nexport function useLocalStorage<T = any>(key: string, initialValue?: T): [T | undefined, (value: T) => void] {\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            return JSON.parse(localStorage.getItem(key) ?? \"\") as T;\n        } catch (error) {\n            return initialValue;\n        }\n    });\n\n    const setValue = (value: T) => {\n        window.localStorage.setItem(key, JSON.stringify(value));\n        setStoredValue(value);\n\n        const event = new CustomEvent<string>(\"storageUpdate\", { detail: key });\n        window.dispatchEvent(event);\n    };\n\n    useEffect(() => {\n        const onStorageUpdate = (e: CustomEvent<string>) => {\n            if (e.detail === key) {\n                try {\n                    setStoredValue(JSON.parse(localStorage.getItem(key) ?? \"\") as T);\n                } catch (error) {}\n            }\n        };\n\n        window.addEventListener(\"storageUpdate\", onStorageUpdate as EventListener);\n        return () => window.removeEventListener(\"storageUpdate\", onStorageUpdate as EventListener);\n    });\n\n    return [storedValue, setValue];\n}\nexport const setLocalStorage = (key: string, value: any) => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n\n    const event = new CustomEvent<string>(\"storageUpdate\", { detail: key });\n    window.dispatchEvent(event);\n};\n\nexport const getLocalStorage = (key: string) => {\n    try {\n        return JSON.parse(localStorage.getItem(key) ?? \"\");\n    } catch (error) {\n        return undefined;\n    }\n};\n","import React from \"react\";\nimport { ISettings } from \"../interfaces/ICookies\";\nimport { useLocalStorage } from \"../util/localStorage\";\n\ninterface ParsedTextProps {\n    children: string;\n}\nconst ParsedText = ({ children }: ParsedTextProps) => {\n    const re = /img([^)]*)\\)/;\n    const words = children.split(re);\n\n    const [settings] = useLocalStorage<ISettings>(\"settings\");\n\n    return (\n        <div className=\"parsedText\">\n            {words.map((word, index) => {\n                if (index % 2 === 0) {\n                    if (settings?.useDangerouslySetInnerHTML)\n                        return <div key={index} dangerouslySetInnerHTML={{ __html: word }}></div>;\n                    else return <div key={index}>{word}</div>;\n                } else if (index % 2 === 1) {\n                    return <img key={index} src={word.substring(1, word.length)} />;\n                }\n            })}\n        </div>\n    );\n};\n\nexport default ParsedText;\n","import { Button, Paper, Radio } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport ParsedText from \"./ParsedText\";\n\ninterface QuestionProps extends IQuestion {\n    next: (answer: string) => void;\n}\nconst Question = ({ question, answers, correct, next }: QuestionProps) => {\n    const [radioState, setRadioState] = useState<string>(\"\");\n    const [checked, setChecked] = useState<boolean>(false);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!checked) setRadioState(event.target.value);\n    };\n\n    return (\n        <div className=\"question\">\n            <Paper elevation={3}>\n                <h2>Frage</h2>\n                <ParsedText>{question}</ParsedText>\n            </Paper>\n            <Paper elevation={3}>\n                <h2>Antworten</h2>\n                {answers.map((answer, index) => (\n                    <div\n                        className={\n                            \"answers \" +\n                            (checked\n                                ? correct === index\n                                    ? \"correct\"\n                                    : radioState === String(index)\n                                    ? \"false\"\n                                    : \"\"\n                                : \"\")\n                        }\n                        key={index}\n                    >\n                        <Radio checked={radioState === String(index)} value={index} onChange={handleChange} />\n\n                        <ParsedText>{answer}</ParsedText>\n                    </div>\n                ))}\n            </Paper>\n            <Paper elevation={3}>\n                <div className=\"questionNavi\">\n                    {checked ? (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                next(radioState);\n                            }}\n                        >\n                            Weiter\n                        </Button>\n                    ) : (\n                        <div\n                            onClick={() => {\n                                if (radioState === \"\") toast.warning(\"Du hast keine Antwort ausgewählt!\");\n                            }}\n                        >\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    setChecked(true);\n                                }}\n                                disabled={radioState === \"\"}\n                            >\n                                Überprüfen\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Paper>\n        </div>\n    );\n};\nexport default Question;\n","import { Accordion, AccordionDetails, AccordionSummary, Button, Paper, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { GivenAnswers } from \"../interfaces/IGivenAnswer\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ParsedText from \"./ParsedText\";\n\ninterface ResultProps {\n    questions: IQuestion[];\n    givenAnswers: GivenAnswers[];\n    resetTest: () => void;\n}\nconst Result = (props: ResultProps) => {\n    let correctAnswers = 0;\n    let wrongAnswers = 0;\n\n    props.givenAnswers.forEach((item) => {\n        if (String(item.correct) == item.given) correctAnswers++;\n        else wrongAnswers++;\n    });\n\n    const correctPercent = Math.round((correctAnswers / (correctAnswers + wrongAnswers)) * 100);\n    return (\n        <div className=\"result\">\n            <Paper elevation={3}>\n                <h1>Ergebnis</h1>\n                <div className=\"percentage\">\n                    <span className={\"percentageNumber\" + (correctPercent >= 50 ? \" good\" : \" bad\")}>\n                        {correctPercent}%\n                    </span>\n                    <span> der Fragen wurden richtig beantwortet</span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"correctCount\">{correctAnswers}</span>\n                    <span>Frage korrekt beantwortet</span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"falseCount\">{wrongAnswers}</span>\n                    <span>Frage falsch beantwortet</span>\n                </div>\n            </Paper>\n\n            <div className=\"repeat\">\n                {props.givenAnswers.map((answer, index) => {\n                    return (\n                        <div key={answer.questionIndex}>\n                            <Accordion\n                                className={\n                                    \"restultQuestion \" + (String(answer.correct) === answer.given ? \"correct\" : \"false\")\n                                }\n                            >\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography>Frage {index + 1}</Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <div className=\"details\">\n                                        <h2>Frage</h2>\n                                        <ParsedText>{props.questions[answer.questionIndex].question}</ParsedText>\n\n                                        {!isNaN(parseInt(answer.given)) && (\n                                            <>\n                                                <h2>Deine Antwort</h2>\n                                                <ParsedText>\n                                                    {\n                                                        props.questions[answer.questionIndex].answers[\n                                                            parseInt(answer.given)\n                                                        ]\n                                                    }\n                                                </ParsedText>\n                                            </>\n                                        )}\n                                        <h2>Korrekte Antwort</h2>\n                                        <ParsedText>\n                                            {props.questions[answer.questionIndex].answers[answer.correct]}\n                                        </ParsedText>\n                                    </div>\n                                </AccordionDetails>\n                            </Accordion>\n                        </div>\n                    );\n                })}\n            </div>\n            <Paper elevation={3}>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => props.resetTest()}>\n                    Nochmal\n                </Button>\n            </Paper>\n        </div>\n    );\n};\n\nexport default Result;\n","import { Paper } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { GivenAnswers } from \"../interfaces/IGivenAnswer\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { generateTest } from \"../util/generateTest\";\nimport Question from \"./Question\";\nimport Result from \"./Result\";\n\ninterface TestProps {\n    count: number;\n    questions: IQuestion[];\n    resetTest: () => void;\n    shouldAnswersBeShuffled: boolean;\n}\n\nconst Test = (props: TestProps) => {\n    const [active, setActive] = useState<number>(0);\n    const [givenAnswers, setGivenAnswers] = useState<GivenAnswers[]>([]);\n\n    const [test, setTest] = useState<IQuestion[]>([]);\n\n    useEffect(() => {\n        setTest(generateTest(props.questions, props.count, props.shouldAnswersBeShuffled));\n    }, [props.questions, props.count]);\n\n    return (\n        <div>\n            {active < props.count ? (\n                <>\n                    <Paper elevation={3}>\n                        <div>\n                            {active + 1} von {props.count}\n                        </div>\n                    </Paper>\n                    {test[active] && (\n                        <Question\n                            key={active}\n                            {...test[active]}\n                            next={(answer: string) => {\n                                setGivenAnswers([\n                                    ...givenAnswers,\n                                    { given: answer, questionIndex: active, correct: test[active]?.correct },\n                                ]);\n                                setActive(active + 1);\n                            }}\n                        ></Question>\n                    )}\n                </>\n            ) : (\n                <Result givenAnswers={givenAnswers} questions={test} resetTest={props.resetTest} />\n            )}\n        </div>\n    );\n};\n\nexport default Test;\n","import { IQuestion } from \"../interfaces/IQuestion\";\nimport { shuffleAnswers } from \"./shuffleAnswers\";\n\nexport const generateTest = (questions: IQuestion[], count: number, shouldAnswersBeShuffled: boolean) => {\n    const order: number[] = [];\n    const generatedQuestions: IQuestion[] = [];\n\n    if (count > questions.length) count = questions.length;\n\n    for (let index = 0; index < count; index++) {\n        let generatedIndex = Math.floor(Math.random() * questions.length);\n        while (order.includes(generatedIndex)) {\n            generatedIndex = Math.floor(Math.random() * questions.length);\n        }\n\n        order.push(generatedIndex);\n\n        const { answers, correct } = shouldAnswersBeShuffled\n            ? shuffleAnswers(questions[generatedIndex].answers, questions[generatedIndex].correct)\n            : { answers: questions[generatedIndex].answers, correct: questions[generatedIndex].correct };\n\n        generatedQuestions.push({ ...questions[generatedIndex], answers, correct });\n    }\n\n    return generatedQuestions;\n};\n","import { toast } from \"react-toastify\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { getLocalStorage, setLocalStorage } from \"./localStorage\";\n\nexport const importJSON = (setFileName: (param: string) => void, setQuestionSelectValue: (param: string) => void) => {\n    //const [storage, setStorage] = useLocalStorage([\"questions\"]);\n\n    const inputField: any = document.getElementById(\"file-upload\");\n    const files = inputField?.files;\n\n    if (files.length <= 0) {\n        return false;\n    }\n    if (files && files[0]) setFileName(files[0].name);\n\n    const fr = new FileReader();\n\n    fr.onload = function (e: any) {\n        try {\n            const fileNameShort = files[0].name.replace(\".json\", \"\");\n            let result: IQuestion[] = JSON.parse(e.target.result);\n            result = result.map((item: IQuestion, index: number) => {\n                item.id = index;\n                item.correct = item.correct - 1;\n                return item;\n            });\n            setLocalStorage(\"questions\", {\n                ...getLocalStorage(\"questions\"),\n                [fileNameShort]: result,\n            });\n            setQuestionSelectValue(fileNameShort);\n            toast.success(\"Es wurden \" + result.length + \" Fragen erfolgreich importiert!\");\n        } catch (error) {\n            toast.error(\"Beim importieren der Fragen ist ein Fehler aufgetreten. Bitte überprüfe deine .json Datei\");\n        }\n    };\n\n    fr.readAsText(files.item(0));\n};\n","import React from \"react\";\nimport { Checkbox, FormControlLabel, IconButton, Popover } from \"@material-ui/core\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { ISettings } from \"../interfaces/ICookies\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { useLocalStorage } from \"../util/localStorage\";\n\nconst Settings = () => {\n    const [areSettingsOpen, setAreSettingsOpen] = useState<boolean>(false);\n\n    const [settings, setSettings] = useLocalStorage<ISettings>(\"settings\");\n    const settingsButton = useRef<HTMLDivElement>(null);\n\n    const [useDangerouslySetInnerHTML, setUseDangerouslySetInnerHTML] = useState<boolean>(\n        settings?.useDangerouslySetInnerHTML ?? true\n    );\n\n    useEffect(() => {\n        let newSettings = settings ?? {};\n        newSettings = { ...newSettings };\n        newSettings.useDangerouslySetInnerHTML = useDangerouslySetInnerHTML;\n        setSettings(newSettings);\n    }, [useDangerouslySetInnerHTML]);\n    return (\n        <>\n            <div ref={settingsButton}>\n                <IconButton\n                    aria-label=\"Einstellungen\"\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    onClick={() => setAreSettingsOpen(!areSettingsOpen)}\n                    color=\"inherit\"\n                >\n                    <SettingsIcon />\n                </IconButton>\n            </div>\n            <Popover\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"right\",\n                }}\n                transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"right\",\n                }}\n                open={areSettingsOpen}\n                onClose={() => setAreSettingsOpen(!areSettingsOpen)}\n                anchorEl={settingsButton.current}\n            >\n                <div className=\"settings\">\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={useDangerouslySetInnerHTML}\n                                onChange={(e) => setUseDangerouslySetInnerHTML(e.target.checked)}\n                                name=\"checkedB\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Ausführung von HTML erlauben\"\n                    />\n                </div>\n            </Popover>\n        </>\n    );\n};\nexport default Settings;\n","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport Settings from \"./Settings\";\ninterface HeaderProps {\n    setTestStarted: (state: boolean) => void;\n}\nconst Header = (props: HeaderProps) => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <div onClick={() => props.setTestStarted(false)} style={{ cursor: \"pointer\", flexGrow: 1 }}>\n                    <Typography variant=\"h6\">Klausurtrainer</Typography>\n                </div>\n                <Settings></Settings>\n            </Toolbar>\n        </AppBar>\n    );\n};\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport Test from \"./components/Test\";\nimport {\n    Button,\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    MenuItem,\n    Paper,\n    Select,\n    TextField,\n} from \"@material-ui/core\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { IQuestion } from \"./interfaces/IQuestion\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { importJSON } from \"./util/importJson\";\nimport Header from \"./components/Header\";\nimport { useLocalStorage } from \"./util/localStorage\";\nimport { ISettings } from \"./interfaces/ICookies\";\n\nfunction App() {\n    const [count, setCount] = useState<number>(10);\n    const [fileName, setFileName] = useState<string>(\"Datei auswählen\");\n    const [hasTestStarted, setTestStarted] = useState<boolean>();\n\n    const [settings, setSettings] = useLocalStorage<ISettings>(\"settings\");\n\n    const [randomOrder, setRandomOrder] = useState<boolean>(settings?.randomOrder ?? true);\n    const [questionSelectValue, setQuestionSelectValue] = useState<string>(\"\");\n    const [availableQuestions] = useLocalStorage<{ [name: string]: IQuestion[] }>(\"questions\");\n\n    useEffect(() => {\n        let newSettings = settings ?? {};\n        newSettings = { ...newSettings };\n        newSettings.randomOrder = randomOrder;\n        setSettings(newSettings);\n    }, [randomOrder]);\n\n    return (\n        <div>\n            <Header setTestStarted={setTestStarted} />\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={6000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n            <div className=\"App\">\n                {hasTestStarted ? (\n                    <Test\n                        key={fileName + count}\n                        questions={availableQuestions?.[questionSelectValue] ?? []}\n                        count={\n                            count >= (availableQuestions?.[questionSelectValue] ?? []).length\n                                ? (availableQuestions?.[questionSelectValue] ?? []).length\n                                : count\n                        }\n                        resetTest={() => setTestStarted(false)}\n                        shouldAnswersBeShuffled={randomOrder}\n                    ></Test>\n                ) : (\n                    <>\n                        <Paper elevation={3}>\n                            <h2 style={{ marginBottom: \"1rem\" }}>Lern Modus auswählen</h2>\n                            <div className=\"startSettings\">\n                                <TextField\n                                    id=\"outlined-number\"\n                                    label=\"Anzahl Fragen\"\n                                    type=\"number\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    value={count}\n                                    variant=\"outlined\"\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                        setCount(parseInt(event.target.value));\n                                    }}\n                                />\n\n                                <FormControl variant=\"outlined\">\n                                    {availableQuestions && (\n                                        <InputLabel id=\"demo-simple-select-outlined-label\">\n                                            Fragenkatalog auswählen\n                                        </InputLabel>\n                                    )}\n                                    <Select\n                                        labelId=\"demo-simple-select-outlined-label\"\n                                        id=\"demo-simple-select-outlined\"\n                                        value={questionSelectValue}\n                                        displayEmpty\n                                        onChange={(e) => setQuestionSelectValue(e.target.value as string)}\n                                        label={availableQuestions ? \"Fragenkatalog auswählen\" : undefined}\n                                        variant=\"outlined\"\n                                    >\n                                        {availableQuestions ? (\n                                            Object.keys(availableQuestions).map((key) => (\n                                                <MenuItem key={key} value={key}>\n                                                    {key}\n                                                </MenuItem>\n                                            ))\n                                        ) : (\n                                            <MenuItem value=\"\" disabled>\n                                                Du hast noch keine Fragen importiert!\n                                            </MenuItem>\n                                        )}\n                                    </Select>\n                                </FormControl>\n\n                                <div>\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox\n                                                checked={randomOrder}\n                                                onChange={(e) => {\n                                                    setRandomOrder(e.target.checked);\n                                                }}\n                                                name=\"checkedB\"\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"Antwortmöglichkeiten zufällig anordnen\"\n                                    />\n                                </div>\n                            </div>\n                        </Paper>\n                        <Paper elevation={3}>\n                            <div className=\"fileUpload\">\n                                <h2 style={{ marginBottom: \"1rem\" }}>Neue Fragen importieren</h2>\n                                <div className=\"name\">Dateiname: {fileName}</div>\n                                <Button\n                                    variant=\"contained\"\n                                    component=\"label\"\n                                    onChange={() => importJSON(setFileName, setQuestionSelectValue)}\n                                >\n                                    Datei auswählen\n                                    <input type=\"file\" hidden id=\"file-upload\" />\n                                </Button>\n                            </div>\n                        </Paper>\n                        <Paper elevation={3}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={(availableQuestions ?? []).length <= 0}\n                                onClick={() => {\n                                    if ((availableQuestions?.[questionSelectValue] ?? []).length > 0)\n                                        setTestStarted(true);\n                                    else {\n                                        if ((availableQuestions ?? []).length <= 0)\n                                            toast.warning(\"Du musst noch eine Datei mit Fragen importieren!\");\n                                        else toast.warning(\"Du musst ein Fragen-Set auswählen\");\n                                    }\n                                }}\n                            >\n                                Test starten\n                            </Button>\n                        </Paper>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport { CookiesProvider } from \"react-cookie\";\nimport App from \"./App\";\n\nconst Root = () => {\n    return (\n        <CookiesProvider>\n            <App />\n        </CookiesProvider>\n    );\n};\nexport default Root;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Root from \"./Root\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Root />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}