{"version":3,"sources":["reportWebVitals.ts","util/localStorage.ts","interfaces/ICookies.ts","util/Translation.tsx","components/LanguageSelection.tsx","components/Settings.tsx","components/Header.tsx","App.tsx","Start.tsx","util/importJson.ts","util/shuffleAnswers.ts","util/sameValues.ts","components/ParsedText.tsx","components/Question.tsx","components/Test.tsx","util/generateTest.ts","components/Result.tsx","Routes.tsx","i18n/i18n.ts","Root.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useLocalStorage","key","initialValue","useState","JSON","parse","localStorage","getItem","error","storedValue","setStoredValue","useEffect","onStorageUpdate","e","detail","window","addEventListener","removeEventListener","value","setItem","stringify","event","CustomEvent","dispatchEvent","setLocalStorage","getLocalStorage","removeLocalStorage","removeItem","QuestionState","TestMode","Translation","children","t","useTranslation","LanguageSelection","i18n","language","selectedLang","setSelectedLang","FormControl","variant","InputLabel","id","Select","labelId","displayEmpty","onChange","lang","target","console","log","changeLanguage","label","MenuItem","Settings","areSettingsOpen","setAreSettingsOpen","settings","setSettings","settingsButton","useRef","useDangerouslySetInnerHTML","setUseDangerouslySetInnerHTML","newSettings","ref","IconButton","aria-label","aria-controls","aria-haspopup","onClick","color","Popover","anchorOrigin","vertical","horizontal","transformOrigin","open","onClose","anchorEl","current","className","FormControlLabel","control","Checkbox","checked","name","Header","history","useHistory","AppBar","position","Toolbar","push","style","cursor","flexGrow","Typography","App","Start","fileName","setFileName","testOptions","setTestOptions","randomOrder","setRandomOrder","count","setCount","mode","Normal","setMode","availableQuestions","questionSet","Object","keys","questionSelectValue","setQuestionSelectValue","Paper","elevation","marginBottom","undefined","map","disabled","values","TextField","type","InputLabelProps","shrink","parseInt","Button","component","inputField","document","getElementById","files","length","fr","FileReader","onload","fileNameShort","replace","result","item","index","correct","toast","success","readAsText","importJSON","hidden","warning","shuffleAnswers","answers","oldCorrect","temporaryValue","randomIndex","currentIndex","Math","floor","random","sameValues","base","check","same","forEach","ParsedText","words","split","word","dangerouslySetInnerHTML","__html","src","substring","Question","question","next","radioState","setRadioState","setChecked","stats","setStats","handleChange","answer","String","Radio","given","state","Correct","Wrong","newStats","answerHistory","currentState","time","Date","getTime","saveAnswerState","Test","progress","useParams","currentTest","setCurrentTest","allQuestions","test","setTest","progressNumber","active","setActive","questionOrder","usedOptions","find","questions","WrongOnly","filter","order","generatedQuestions","generatedIndex","includes","givenAnswers","generateTest","questionIndex","Result","correctAnswers","wrongAnswers","correctPercent","round","Accordion","AccordionSummary","expandIcon","AccordionDetails","isNaN","Routes","path","use","LanguageDetector","initReactI18next","init","resources","en","translations","de","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","Root","basename","packageJSON","homepage","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3544bc5b.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState } from \"react\";\n\nexport function useLocalStorage<T = any>(key: string, initialValue?: T): [T | undefined, (value: T) => void] {\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            return JSON.parse(localStorage.getItem(key) ?? \"\") as T;\n        } catch (error) {\n            return initialValue;\n        }\n    });\n\n    const setValue = (value: T) => {\n        window.localStorage.setItem(key, JSON.stringify(value));\n        setStoredValue(value);\n\n        const event = new CustomEvent<string>(\"storageUpdate\", { detail: key });\n        window.dispatchEvent(event);\n    };\n\n    useEffect(() => {\n        const onStorageUpdate = (e: CustomEvent<string>) => {\n            if (e.detail === key) {\n                try {\n                    setStoredValue(JSON.parse(localStorage.getItem(key) ?? \"\") as T);\n                } catch (error) {}\n            }\n        };\n\n        window.addEventListener(\"storageUpdate\", onStorageUpdate as EventListener);\n        return () => window.removeEventListener(\"storageUpdate\", onStorageUpdate as EventListener);\n    });\n\n    return [storedValue, setValue];\n}\nexport function setLocalStorage<T = any>(key: string, value: T) {\n    window.localStorage.setItem(key, JSON.stringify(value));\n\n    const event = new CustomEvent<string>(\"storageUpdate\", { detail: key });\n    window.dispatchEvent(event);\n}\n\nexport function getLocalStorage<T = any>(key: string): T | undefined {\n    try {\n        return JSON.parse(localStorage.getItem(key) ?? \"\");\n    } catch (error) {\n        return undefined;\n    }\n}\nexport function removeLocalStorage(key: string): void {\n    localStorage.removeItem(key);\n    const event = new CustomEvent<string>(\"storageUpdate\", { detail: key });\n    window.dispatchEvent(event);\n}\n","import { GivenAnswers } from \"./IGivenAnswer\";\nimport { IQuestion } from \"./IQuestion\";\n\nexport interface ICookies {\n    settings?: ISettings;\n    questions?: IQuestionSets;\n    stats?: IStats;\n    testOptions?: ITestOptions;\n    currentTest?: ICurrentTest;\n}\nexport interface IStats {\n    [name: string]: {\n        [id: number]: IStat;\n    };\n}\nexport interface IStat {\n    answerHistory: {\n        result: QuestionState;\n        time: number;\n    }[];\n    currentState: QuestionState;\n}\nexport enum QuestionState {\n    Wrong = \"wrong\",\n    Correct = \"correct\",\n}\nexport enum TestMode {\n    Normal = \"normal\",\n    WrongOnly = \"wrongOnly\",\n}\nexport interface ISettings {\n    useDangerouslySetInnerHTML?: boolean;\n}\nexport interface ITestOptions {\n    mode?: TestMode;\n    randomOrder?: boolean;\n    count?: number;\n    questionSet?: string;\n}\nexport interface IQuestionSets {\n    [name: string]: IQuestion[];\n}\nexport interface ICurrentTest {\n    questionOrder: number[];\n    usedOptions: string;\n    givenAnswers: GivenAnswers[];\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\ninterface TranslationProps {\n    children: string;\n}\nconst Translation = ({ children }: TranslationProps) => {\n    const { t } = useTranslation();\n    return <>{t(children)}</>;\n};\nexport default Translation;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport Translation from \"../util/Translation\";\n\n/**\n * With this the user can change its language\n */\nconst LanguageSelection = () => {\n    const { i18n } = useTranslation();\n    const [selectedLang, setSelectedLang] = useState<string>(i18n.language);\n    const changeLanguage = (lang: string): void => {\n        console.log(\"changed lang to \", lang);\n\n        setSelectedLang(lang);\n        i18n.changeLanguage(lang);\n    };\n\n    return (\n        <FormControl variant=\"outlined\">\n            <InputLabel id=\"demo-simple-select-outlined-label\">\n                <Translation>selectLang</Translation>\n            </InputLabel>\n\n            <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={selectedLang}\n                displayEmpty\n                onChange={(e) => changeLanguage(e.target.value as string)}\n                label={<Translation>selectLang</Translation>}\n                variant=\"outlined\"\n            >\n                <MenuItem key={\"de-DE\"} value={\"de-DE\"}>\n                    Deutsch\n                </MenuItem>{\" \"}\n                <MenuItem key={\"en-US\"} value={\"en-US\"}>\n                    English\n                </MenuItem>\n            </Select>\n        </FormControl>\n    );\n};\nexport default LanguageSelection;\n","import React from \"react\";\nimport { Checkbox, FormControlLabel, IconButton, Popover } from \"@material-ui/core\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { ISettings } from \"../interfaces/ICookies\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { useLocalStorage } from \"../util/localStorage\";\nimport LanguageSelection from \"./LanguageSelection\";\nimport Translation from \"../util/Translation\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Settings = () => {\n    const [areSettingsOpen, setAreSettingsOpen] = useState<boolean>(false);\n    const { t } = useTranslation();\n    const [settings, setSettings] = useLocalStorage<ISettings>(\"settings\");\n    const settingsButton = useRef<HTMLDivElement>(null);\n\n    const [useDangerouslySetInnerHTML, setUseDangerouslySetInnerHTML] = useState<boolean>(\n        settings?.useDangerouslySetInnerHTML ?? true\n    );\n\n    useEffect(() => {\n        let newSettings = settings ?? {};\n        newSettings = { ...newSettings };\n        newSettings.useDangerouslySetInnerHTML = useDangerouslySetInnerHTML;\n        setSettings(newSettings);\n    }, [useDangerouslySetInnerHTML]);\n    return (\n        <>\n            <div ref={settingsButton}>\n                <IconButton\n                    aria-label={t(\"settings\")}\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    onClick={() => setAreSettingsOpen(!areSettingsOpen)}\n                    color=\"inherit\"\n                >\n                    <SettingsIcon />\n                </IconButton>\n            </div>\n            <Popover\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"right\",\n                }}\n                transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"right\",\n                }}\n                open={areSettingsOpen}\n                onClose={() => setAreSettingsOpen(!areSettingsOpen)}\n                anchorEl={settingsButton.current}\n            >\n                <div className=\"settings\">\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={useDangerouslySetInnerHTML}\n                                onChange={(e) => setUseDangerouslySetInnerHTML(e.target.checked)}\n                                name=\"checkedB\"\n                                color=\"primary\"\n                            />\n                        }\n                        label={<Translation>allowHTML</Translation>}\n                    />\n                    <LanguageSelection />\n                </div>\n            </Popover>\n        </>\n    );\n};\nexport default Settings;\n","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Settings from \"./Settings\";\n\nconst Header = () => {\n    const history = useHistory();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <div onClick={() => history.push(\"/\")} style={{ cursor: \"pointer\", flexGrow: 1 }}>\n                    <Typography variant=\"h6\">Klausurtrainer</Typography>\n                </div>\n                <Settings></Settings>\n            </Toolbar>\n        </AppBar>\n    );\n};\nexport default Header;\n","import React from \"react\";\nimport Header from \"./components/Header\";\n\ninterface AppProps {\n    children: JSX.Element | JSX.Element[];\n}\nconst App = ({ children }: AppProps) => {\n    return (\n        <div>\n            <Header />\n            <div className=\"App\">{children}</div>\n        </div>\n    );\n};\nexport default App;\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    Button,\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    MenuItem,\n    Paper,\n    Select,\n    TextField,\n} from \"@material-ui/core\";\nimport { toast } from \"react-toastify\";\nimport { importJSON } from \"./util/importJson\";\nimport { removeLocalStorage, useLocalStorage } from \"./util/localStorage\";\nimport { IQuestionSets, ITestOptions, TestMode } from \"./interfaces/ICookies\";\nimport { useHistory } from \"react-router-dom\";\nimport Translation from \"./util/Translation\";\n\nfunction Start() {\n    const [fileName, setFileName] = useState<string>();\n\n    const history = useHistory();\n    const [testOptions, setTestOptions] = useLocalStorage<ITestOptions>(\"testOptions\");\n    removeLocalStorage(\"currentTest\");\n\n    const [randomOrder, setRandomOrder] = useState<boolean>(testOptions?.randomOrder ?? true);\n    const [count, setCount] = useState<number>(testOptions?.count ?? 10);\n    const [mode, setMode] = useState<TestMode>(testOptions?.mode ?? TestMode.Normal);\n    const [availableQuestions] = useLocalStorage<IQuestionSets>(\"questions\");\n    const [questionSelectValue, setQuestionSelectValue] = useState<string>(\n        testOptions?.questionSet ?? Object.keys(availableQuestions ?? {})[0] ?? \"\"\n    );\n\n    useEffect(() => {\n        let newTestOptions = testOptions ?? {};\n        newTestOptions = { mode, count, randomOrder, questionSet: questionSelectValue };\n\n        setTestOptions(newTestOptions);\n    }, [mode, randomOrder, count, questionSelectValue]);\n\n    return (\n        <div>\n            <Paper elevation={3}>\n                <h2 style={{ marginBottom: \"1rem\" }}>\n                    <Translation>startHeading</Translation>\n                </h2>\n                <div className=\"startSettings\">\n                    <FormControl variant=\"outlined\">\n                        {availableQuestions && (\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                <Translation>selectQuestions</Translation>\n                            </InputLabel>\n                        )}\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label\"\n                            id=\"demo-simple-select-outlined\"\n                            value={questionSelectValue}\n                            displayEmpty\n                            onChange={(e) => setQuestionSelectValue(e.target.value as string)}\n                            label={availableQuestions ? <Translation>selectQuestions</Translation> : undefined}\n                            variant=\"outlined\"\n                        >\n                            {availableQuestions ? (\n                                Object.keys(availableQuestions).map((key) => (\n                                    <MenuItem key={key} value={key}>\n                                        {key}\n                                    </MenuItem>\n                                ))\n                            ) : (\n                                <MenuItem value=\"\" disabled>\n                                    <Translation>noImprtedQuestions</Translation>\n                                </MenuItem>\n                            )}\n                        </Select>\n                    </FormControl>\n                    <FormControl variant=\"outlined\">\n                        {availableQuestions && (\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                <Translation>selectMode</Translation>\n                            </InputLabel>\n                        )}\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label\"\n                            id=\"demo-simple-select-outlined\"\n                            value={mode}\n                            displayEmpty\n                            onChange={(e) => setMode(e.target.value as TestMode)}\n                            label={<Translation>selectMode</Translation>}\n                            variant=\"outlined\"\n                        >\n                            {Object.values(TestMode).map((value) => (\n                                <MenuItem value={value} key={value}>\n                                    <Translation>{value}</Translation>\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n\n                    <TextField\n                        id=\"outlined-number\"\n                        label={<Translation>questionCount</Translation>}\n                        type=\"number\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        value={count}\n                        variant=\"outlined\"\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            setCount(parseInt(event.target.value));\n                        }}\n                    />\n\n                    <div>\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={randomOrder}\n                                    onChange={(e) => {\n                                        setRandomOrder(e.target.checked);\n                                    }}\n                                    name=\"checkedB\"\n                                    color=\"primary\"\n                                />\n                            }\n                            label=\"Antwortmöglichkeiten zufällig anordnen\"\n                        />\n                    </div>\n                </div>\n            </Paper>\n            <Paper elevation={3}>\n                <div className=\"fileUpload\">\n                    <h2 style={{ marginBottom: \"1rem\" }}>\n                        <Translation>importHeading</Translation>\n                    </h2>\n                    <div className=\"name\">\n                        <Translation>filename</Translation>: {fileName ?? <Translation>noFileSelected</Translation>}\n                    </div>\n                    <Button\n                        variant=\"contained\"\n                        component=\"label\"\n                        onChange={() => importJSON(setFileName, setQuestionSelectValue)}\n                    >\n                        <Translation>selectFile</Translation>\n                        <input type=\"file\" hidden id=\"file-upload\" />\n                    </Button>\n                </div>\n            </Paper>\n            <Paper elevation={3}>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={(availableQuestions ?? []).length <= 0}\n                    onClick={() => {\n                        if ((availableQuestions?.[questionSelectValue] ?? []).length > 0) history.push(\"/trainer/\");\n                        else {\n                            if ((availableQuestions ?? []).length <= 0)\n                                toast.warning(<Translation>nothingImportedWarning</Translation>);\n                            else toast.warning(<Translation>nothingSelected</Translation>);\n                        }\n                    }}\n                >\n                    <Translation>startTest</Translation>\n                </Button>\n            </Paper>\n        </div>\n    );\n}\n\nexport default Start;\n","import { toast } from \"react-toastify\";\nimport { IQuestionSets } from \"../interfaces/ICookies\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { getLocalStorage, setLocalStorage } from \"./localStorage\";\n\nexport const importJSON = (setFileName: (param: string) => void, setQuestionSelectValue: (param: string) => void) => {\n    //const [storage, setStorage] = useLocalStorage([\"questions\"]);\n\n    const inputField: any = document.getElementById(\"file-upload\");\n    const files = inputField?.files;\n\n    if (files.length <= 0) {\n        return false;\n    }\n    if (files && files[0]) setFileName(files[0].name);\n\n    const fr = new FileReader();\n\n    fr.onload = function (e: any) {\n        try {\n            const fileNameShort = files[0].name.replace(\".json\", \"\");\n            let result: IQuestion[] = JSON.parse(e.target.result);\n            result = result.map((item: IQuestion, index: number) => {\n                item.id = index;\n                item.correct = item.correct - 1;\n                return item;\n            });\n            setLocalStorage<IQuestionSets>(\"questions\", {\n                ...getLocalStorage<IQuestionSets>(\"questions\"),\n                [fileNameShort]: result,\n            });\n            setQuestionSelectValue(fileNameShort);\n            toast.success(\"Es wurden \" + result.length + \" Fragen erfolgreich importiert!\");\n        } catch (error) {\n            toast.error(\"Beim importieren der Fragen ist ein Fehler aufgetreten. Bitte überprüfe deine .json Datei\");\n        }\n    };\n\n    fr.readAsText(files.item(0));\n};\n","export const shuffleAnswers = (answers: string[], oldCorrect: number) => {\n    answers = JSON.parse(JSON.stringify(answers));\n    let currentIndex = answers.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        if (currentIndex == oldCorrect) oldCorrect = randomIndex;\n        else if (randomIndex == oldCorrect) oldCorrect = currentIndex;\n\n        // And swap it with the current element.\n        temporaryValue = answers[currentIndex];\n        answers[currentIndex] = answers[randomIndex];\n        answers[randomIndex] = temporaryValue;\n    }\n\n    return { answers, correct: oldCorrect };\n};\n","export const sameValues = (base: any, check: any): boolean => {\n    let same = true;\n    console.log(base, check);\n\n    if (typeof base === \"object\") {\n        try {\n            Object.keys(base).forEach((key) => {\n                if (typeof base[key] === \"object\") {\n                    same = sameValues(base[key], check[key]);\n                }\n                if (base[key] !== check[key]) {\n                    same = false;\n                }\n            });\n        } catch (error) {\n            same = false;\n        }\n    } else {\n        same = base === check;\n    }\n    return same;\n};\n","import React from \"react\";\nimport { ISettings } from \"../interfaces/ICookies\";\nimport { useLocalStorage } from \"../util/localStorage\";\n\ninterface ParsedTextProps {\n    children: string;\n}\nconst ParsedText = ({ children }: ParsedTextProps) => {\n    const re = /img([^)]*)\\)/;\n    const words = children.split(re);\n\n    const [settings] = useLocalStorage<ISettings>(\"settings\");\n\n    return (\n        <div className=\"parsedText\">\n            {words.map((word, index) => {\n                if (index % 2 === 0) {\n                    if (settings?.useDangerouslySetInnerHTML)\n                        return <div key={index} dangerouslySetInnerHTML={{ __html: word }}></div>;\n                    else return <div key={index}>{word}</div>;\n                } else if (index % 2 === 1) {\n                    return <img key={index} src={word.substring(1, word.length)} />;\n                }\n            })}\n        </div>\n    );\n};\n\nexport default ParsedText;\n","import { Button, Paper, Radio } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { IStats, QuestionState } from \"../interfaces/ICookies\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { useLocalStorage } from \"../util/localStorage\";\nimport Translation from \"../util/Translation\";\nimport ParsedText from \"./ParsedText\";\n\ninterface QuestionProps extends IQuestion {\n    questionSet: string;\n    next: (answer: string) => void;\n}\nconst Question = ({ question, id, answers, correct, next, questionSet }: QuestionProps) => {\n    const [radioState, setRadioState] = useState<string>(\"\");\n    const [checked, setChecked] = useState<boolean>(false);\n\n    const [stats, setStats] = useLocalStorage<IStats>(\"stats\");\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!checked) setRadioState(event.target.value);\n    };\n    const saveAnswerState = (correct: number, given: number) => {\n        const state = correct === given ? QuestionState.Correct : QuestionState.Wrong;\n\n        const newStats = stats ?? {};\n        newStats[questionSet] = stats?.[questionSet] ?? {};\n        newStats[questionSet][id] = stats?.[questionSet][id] ?? { answerHistory: [], currentState: state };\n\n        newStats[questionSet][id].currentState = state;\n        newStats[questionSet][id].answerHistory.push({\n            result: state,\n            time: new Date().getTime(),\n        });\n        setStats(newStats);\n    };\n    return (\n        <div className=\"question\">\n            <Paper elevation={3}>\n                <h2>\n                    <Translation>question</Translation>\n                </h2>\n                <ParsedText>{question}</ParsedText>\n            </Paper>\n            <Paper elevation={3}>\n                <h2>\n                    <Translation>answers</Translation>\n                </h2>\n                {answers.map((answer, index) => (\n                    <div\n                        className={\n                            \"answers \" +\n                            (checked\n                                ? correct === index\n                                    ? \"correct\"\n                                    : radioState === String(index)\n                                    ? \"false\"\n                                    : \"\"\n                                : \"\")\n                        }\n                        key={index}\n                    >\n                        <Radio checked={radioState === String(index)} value={index} onChange={handleChange} />\n\n                        <ParsedText>{answer}</ParsedText>\n                    </div>\n                ))}\n            </Paper>\n            <Paper elevation={3}>\n                <div className=\"questionNavi\">\n                    {checked ? (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                next(radioState);\n                            }}\n                        >\n                            <Translation>next</Translation>\n                        </Button>\n                    ) : (\n                        <div\n                            onClick={() => {\n                                if (radioState === \"\") toast.warning(\"Du hast keine Antwort ausgewählt!\");\n                            }}\n                        >\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    saveAnswerState(correct, parseInt(radioState));\n                                    setChecked(true);\n                                }}\n                                disabled={radioState === \"\"}\n                            >\n                                <Translation>check</Translation>\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Paper>\n        </div>\n    );\n};\nexport default Question;\n","import { Button, Paper } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { ICurrentTest, IQuestionSets, ITestOptions } from \"../interfaces/ICookies\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { generateTest } from \"../util/generateTest\";\nimport { useLocalStorage } from \"../util/localStorage\";\nimport { sameValues } from \"../util/sameValues\";\nimport Translation from \"../util/Translation\";\nimport Question from \"./Question\";\n\ninterface TestParams {\n    progress?: string;\n}\n\nconst Test = () => {\n    const { progress } = useParams<TestParams>();\n\n    const [testOptions] = useLocalStorage<ITestOptions>(\"testOptions\");\n    const [currentTest, setCurrentTest] = useLocalStorage<ICurrentTest>(\"currentTest\");\n    const [allQuestions] = useLocalStorage<IQuestionSets>(\"questions\");\n    const history = useHistory();\n\n    const [count, setCount] = useState<number>(testOptions?.count ?? 10);\n    const [test, setTest] = useState<IQuestion[]>([]);\n\n    let progressNumber = parseInt(progress ?? \"1\");\n    if (progressNumber >= count) history.push(\"/result\");\n    progressNumber = progressNumber >= count ? count : progressNumber;\n\n    const [active, setActive] = useState<number>(progressNumber - 1);\n\n    if (!testOptions?.questionSet || !allQuestions || !allQuestions[testOptions?.questionSet]) {\n        return (\n            <div>\n                <h2>\n                    <Translation>invalidQuestions</Translation>\n                </h2>\n                <Button onClick={() => history.push(\"/\")} variant=\"contained\" color=\"primary\">\n                    <Translation>backToStart</Translation>\n                </Button>\n            </div>\n        );\n    }\n    useEffect(() => {\n        console.log(progressNumber);\n\n        setActive(progressNumber - 1);\n    }, [progressNumber]);\n\n    useEffect(() => {\n        let test: IQuestion[];\n        if (\n            (currentTest?.questionOrder.length ?? 0) > 0 &&\n            sameValues(JSON.parse(currentTest?.usedOptions ?? \"{}\"), testOptions)\n        ) {\n            test = currentTest?.questionOrder.map((index) =>\n                allQuestions[testOptions.questionSet as string].find((question) => question.id === index)\n            ) as IQuestion[];\n        } else {\n            test = generateTest(testOptions?.questionSet as string);\n        }\n        setTest(test);\n        setCount(test.length);\n    }, [testOptions?.count, testOptions?.mode, testOptions?.questionSet, testOptions?.randomOrder]);\n\n    if (test.length <= 0) {\n        return (\n            <div>\n                <h2>\n                    <Translation>noValidQuestions</Translation>\n                </h2>\n                <div>\n                    <Translation>noValidQuestionsExplination</Translation>\n                </div>\n                <Button onClick={() => history.push(\"/\")} variant=\"contained\" color=\"primary\">\n                    <Translation>backToStart</Translation>\n                </Button>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <Paper elevation={3}>\n                <div className=\"outOf\">\n                    {active + 1} <Translation>outOf</Translation> {count}\n                </div>\n            </Paper>\n            {test[active] && (\n                <Question\n                    questionSet={testOptions?.questionSet}\n                    key={active}\n                    {...test[active]}\n                    next={(answer: string) => {\n                        const current = currentTest?.givenAnswers ?? [];\n                        current.push({ given: answer, questionIndex: active, correct: test[active]?.correct });\n\n                        setCurrentTest({ ...currentTest, givenAnswers: current } as ICurrentTest);\n\n                        history.push(\"/trainer/\" + (active + 2));\n                    }}\n                ></Question>\n            )}\n        </div>\n    );\n};\n\nexport default Test;\n","import { ICurrentTest, IQuestionSets, IStats, ITestOptions, QuestionState, TestMode } from \"../interfaces/ICookies\";\nimport { IQuestion } from \"../interfaces/IQuestion\";\nimport { getLocalStorage, setLocalStorage } from \"./localStorage\";\nimport { shuffleAnswers } from \"./shuffleAnswers\";\n\nexport const generateTest = (questionSet: string) => {\n    const allQuestions = getLocalStorage<IQuestionSets>(\"questions\");\n    const stats = getLocalStorage<IStats>(\"stats\")?.[questionSet];\n    const settings = getLocalStorage<ITestOptions>(\"testOptions\");\n\n    let questions = allQuestions?.[questionSet] ?? [];\n    if (settings?.mode === TestMode.WrongOnly) {\n        questions = questions.filter((item) => !(stats?.[item.id]?.currentState === QuestionState.Correct));\n    }\n\n    const order: number[] = [];\n    const generatedQuestions: IQuestion[] = [];\n\n    let count = settings?.count ?? 10;\n\n    if (count > questions.length) count = questions.length;\n\n    for (let index = 0; index < count; index++) {\n        let generatedIndex = Math.floor(Math.random() * questions.length);\n        while (order.includes(generatedIndex)) {\n            generatedIndex = Math.floor(Math.random() * questions.length);\n        }\n\n        order.push(generatedIndex);\n\n        const { answers, correct } = settings?.randomOrder\n            ? shuffleAnswers(questions[generatedIndex].answers, questions[generatedIndex].correct)\n            : { answers: questions[generatedIndex].answers, correct: questions[generatedIndex].correct };\n\n        generatedQuestions.push({ ...questions[generatedIndex], answers, correct });\n    }\n\n    setLocalStorage<ICurrentTest>(\"currentTest\", {\n        questionOrder: order,\n        usedOptions: JSON.stringify(settings),\n        givenAnswers: [],\n    });\n\n    return generatedQuestions;\n};\n","import { Accordion, AccordionDetails, AccordionSummary, Button, Paper, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ParsedText from \"./ParsedText\";\nimport { useHistory } from \"react-router-dom\";\nimport Translation from \"../util/Translation\";\nimport { removeLocalStorage, useLocalStorage } from \"../util/localStorage\";\nimport { ICurrentTest, IQuestionSets, ITestOptions } from \"../interfaces/ICookies\";\n\nconst Result = () => {\n    const [currentTest] = useLocalStorage<ICurrentTest>(\"currentTest\");\n    const [testOptions] = useLocalStorage<ITestOptions>(\"testOptions\");\n    const [allQuestions] = useLocalStorage<IQuestionSets>(\"questions\");\n\n    if (!testOptions?.questionSet || !allQuestions || !allQuestions[testOptions?.questionSet]) {\n        return <div>Someting went wrong</div>;\n    }\n    const questions = allQuestions[testOptions?.questionSet];\n    let correctAnswers = 0;\n    let wrongAnswers = 0;\n\n    const history = useHistory();\n    currentTest?.givenAnswers.forEach((item) => {\n        if (String(item.correct) == item.given) correctAnswers++;\n        else wrongAnswers++;\n    });\n\n    const correctPercent = Math.round((correctAnswers / (correctAnswers + wrongAnswers)) * 100);\n    return (\n        <div className=\"result\">\n            <Paper elevation={3}>\n                <h1>\n                    <Translation>result</Translation>\n                </h1>\n                <div className=\"percentage\">\n                    <span className={\"percentageNumber\" + (correctPercent >= 50 ? \" good\" : \" bad\")}>\n                        {correctPercent}%\n                    </span>\n                    <span>\n                        <Translation>resultText</Translation>\n                    </span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"correctCount\">{correctAnswers}</span>\n                    <span>\n                        <Translation>questionsCorrect</Translation>\n                    </span>\n                </div>\n                <div className=\"count\">\n                    <span className=\"falseCount\">{wrongAnswers}</span>\n                    <span>\n                        <Translation>questionsWrong</Translation>\n                    </span>\n                </div>\n            </Paper>\n\n            <div className=\"repeat\">\n                {currentTest?.givenAnswers.map((answer, index) => {\n                    return (\n                        <div key={answer.questionIndex}>\n                            <Accordion\n                                className={\n                                    \"restultQuestion \" + (String(answer.correct) === answer.given ? \"correct\" : \"false\")\n                                }\n                            >\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography>\n                                        <Translation>question</Translation> {index + 1}\n                                    </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <div className=\"details\">\n                                        <h2>\n                                            <Translation>question</Translation>\n                                        </h2>\n                                        <ParsedText>{questions[answer.questionIndex].question}</ParsedText>\n\n                                        {!isNaN(parseInt(answer.given)) && (\n                                            <>\n                                                <h2>\n                                                    <Translation>yourAnswer</Translation>\n                                                </h2>\n                                                <ParsedText>\n                                                    {questions[answer.questionIndex].answers[parseInt(answer.given)]}\n                                                </ParsedText>\n                                            </>\n                                        )}\n                                        <h2>\n                                            <Translation>correctAnswer</Translation>\n                                        </h2>\n                                        <ParsedText>\n                                            {questions[answer.questionIndex].answers[answer.correct]}\n                                        </ParsedText>\n                                    </div>\n                                </AccordionDetails>\n                            </Accordion>\n                        </div>\n                    );\n                })}\n            </div>\n            <Paper elevation={3}>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        removeLocalStorage(\"currentTest\");\n                        history.push(\"/\");\n                    }}\n                >\n                    <Translation>repeat</Translation>\n                </Button>\n            </Paper>\n        </div>\n    );\n};\n\nexport default Result;\n","import React from \"react\";\nimport Start from \"./Start\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Test from \"./components/Test\";\nimport Result from \"./components/Result\";\n\nconst Routes = () => {\n    return (\n        <Switch>\n            <Route path=\"/trainer/:progress?\" component={Test} />\n            <Route path=\"/result\" component={Result} />\n            <Route path=\"*\">\n                <Start />\n            </Route>\n        </Switch>\n    );\n};\n\nexport default Routes;\n","import i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport de from \"./de.json\";\nimport en from \"./en.json\";\n\n/**\n * This initializes the i18n library with all the settings used in this project\n */\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        // we init with resources\n        resources: {\n            en: {\n                translations: en,\n            },\n            de: {\n                translations: de,\n            },\n        },\n        fallbackLng: \"en\",\n        debug: false,\n\n        // have a common namespace used around the full app\n        ns: [\"translations\"],\n        defaultNS: \"translations\",\n\n        keySeparator: false, // we use content as keys\n\n        interpolation: {\n            escapeValue: false,\n        },\n    });\n\nexport default i18n;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport App from \"./App\";\nimport Routes from \"./Routes\";\n\nimport packageJSON from \"../package.json\";\nimport \"./i18n/i18n\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nconst Root = () => {\n    return (\n        <BrowserRouter basename={packageJSON.homepage}>\n            <App>\n                <Routes />\n                <ToastContainer\n                    position=\"bottom-center\"\n                    autoClose={6000}\n                    hideProgressBar={false}\n                    newestOnTop={false}\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss\n                    draggable\n                    pauseOnHover\n                />\n            </App>\n        </BrowserRouter>\n    );\n};\nexport default Root;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Root from \"./Root\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Root />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}